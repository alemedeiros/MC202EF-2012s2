
Texto original:
--------------------------------------------------
/*
 * huffman.h - Interface para o módulo de compressão de textos
 *             utilizando o algoritmo de Huffman.
 */

#include <string.h>
#include "balloc.h"
#include "imprimearvore.h"

#include "config.h"

typedef enum {false, true} Boolean;

Boolean ConstroiHuffman(char txt[],int n);
/* A partir do texto 'texto' de 'n' caracteres, constrói a árvore de
   Huffman para compressão deste texto e a guarda numa variável local
   do módulo 'huffman.c'.  Numa outra variável local guarda um vetor
   de apontadores para as folhas da árvore. Devolve 'true' se a
   construção teve sucesso; 'false' caso contrário. */

void ImprimeHuffman();
/* Imprime a árvore de Huffman num formato legível. Função auxiliar
   para os testes pelo programa principal */ 
   
void LiberaHuffman();
/* Libera a memória dinâmica ocupada pelas estruturas criadas por
   'ConstroiHuffman'. */

Boolean Comprime(char *txt, int n,
		 char *bits, int *numBits, int numBitsMax);
/* Comprime os 'n' caracteres do texto 'txt' usando as estruturas já
   construídas, e deixa o resultado como uma seqüência de pseudo-bits
   (ou bits verdadeiros) na área apontada por 'bits'. Devolve em
   'numBits' o número total de bits gerado. Em caso de sucesso devolve
   'true'; se houver mais de 'numBitsMax' bits, devolve 'false'. */

Boolean Descomprime(char *txt, int *n,
		    char *bits, int numBits, int numMaxCars);
/* Descomprime a cadeia de pseudo-bits (ou bits verdadeiros) na área
   apontada por 'bits', de comprimento 'numBits' seguindo a árvore de
   Huffman já construída.  Em caso de sucesso devolve 'true'; se
   aparecer uma codificação incompatível com a árvore, ou se houver
   mais caracteres que 'tamMaxTxt' devolve 'false'.*/

--------------------------------------------------

Árvore de Huffman:

                 / 278: 
            / 537
                                               /   5:C
                                          /   9
                                                         /   1:F
                                                    /   2
                                                         \   1:ü
                                               \   4
                                                         /   1:â
                                                    \   2
                                                         \   1:}
                                     /  18
                                          \   9:g
                                /  35
                                     \  17:.
                           /  67
                                               /   4:	
                                          /   8
                                               \   4:í
                                     /  16
                                               /   4:M
                                          \   8
                                                         /   1:ê
                                                    /   2
                                                         \   1:]
                                               \   4
                                                         /   1:y
                                                    \   2
                                                         \   1:N
                                \  32
                                                         /   1:{
                                                    /   2
                                                         \   1:z
                                               /   4
                                                    \   2:L
                                          /   8
                                                         /   1:ú
                                                    /   2
                                                         \   1:A
                                               \   4
                                                         /   1:[
                                                    \   2
                                                         \   1:T
                                     \  16
                                               /   4:#
                                          \   8
                                               \   4:ó
                      / 132
                           \  65:n
                 \ 259
                      \ 127:e
       /1023
                                /  32:p
                           /  64
                                \  32:v
                      / 126
                                     /  16:x
                                /  32
                                                    /   2:q
                                               /   4
                                                    \   2:E
                                          /   8
                                               \   4:D
                                     \  16
                                          \   8:H
                           \  62
                                     /  15:,
                                \  30
                                     \  15:h
                 / 250
                      \ 124:a
            \ 486
                           /  62:u
                      / 122
                           \  60:m
                 \ 236
                                /  30:f
                           /  57
                                                    /   2:j
                                               /   4
                                                         /   1:>
                                                    \   2
                                                         \   1:<
                                          /   7
                                               \   3:ç
                                     /  14
                                          \   7:(
                                \  27
                                          /   7:)
                                     \  13
                                               /   3:-
                                          \   6
                                               \   3:I
                      \ 114
                           \  57:d
 1711
                      / 109:o
                 / 206
                           /  49:c
                      \  97
                                     /  13:b
                                /  25
                                     \  12:á
                           \  48
                                     /  12:/
                                \  23
                                          /   6:"
                                     \  11
                                          \   5:ã
            / 380
                      /  91:r
                 \ 174
                           /  43:

                      \  83
                           \  40:l
       \ 688
                      /  82:t
                 / 162
                      \  80:s
            \ 308
                                /  20:*
                           /  39
                                     /  10:B
                                \  19
                                     \   9:;
                      /  75
                           \  36:'
                 \ 146
                      \  71:i

Texto comprimido:

011000100011101001111000111111
101100010011100011100011100101
010110101101110101100011110001
000111110001000011010001111000
101100011101001101110011110111
110100101101011101111111001011
011000010000100110100001111111
000011001110110101111001010111
101011100001000100110000001111
111000011001110011110010110110
011011100100100111100011111111
111111111111111111111111111111
111110011001100000100000001101
100111010101101010000011111101
111111010010001101111001110101
000000111001001111111000011001
111011010010011100011100011100
101010110101101110010011110001
110110001010010100111011000100
001101001101010001001110000110
011110001011100001000110101000
011010110111101101110101100010
001011101010011101100010000110
100110101000100111000011001110
110000101100111010010000100001
110110111011101011000011000010
100111011000100001101001101010
001001110000110011101100001000
010010101111010100001001011001
010010110111001110101110011011
101011000011000010100101001110
110001000011010011010100010011
100001100111011000010110101111
101010001100001101111011011101
011000011000010100101001001111
011010001101111110010000110010
001111111001101010011100101111
101100111110001110100100000101
100101100111100110101100111100
110111110001110001101011101110
100011001010110100001100010010
100100011010111011101000110010
101101011111011111101111101000
100011010101110000101101001001
110001110001110010101011010100
010100110110110001010010111100
111011011001111011001001110110
100101011001000011010001111111
010100010010001100010010110001
000111111110110010101111011111
010010100110000010111110000011
111100111100101101100110111111
000100011110010110110011011100
010111100001100111000101101000
010111011011010010110100110100
111100010111000010101100111101
101011111010001000110101110110
000000011110101110110010010110
111001110101110011110000110001
001111111111101101001001110001
110001110010101011010111101111
101001011010111011010111100101
011110101110000100010011000000
111111100001100001000111100111
001111001011011001101111111100
111101011111011110100111010010
110000101011111010100111001010
101111011101010010100000110010
101110110001000111010000111011
011010010000100111111111110000
011111110010110110000100001001
101000011111100010101100010011
100011100011100101010110101101
110011010001011011101111111101
101000010011100101010111011110
011001101011010111101110101001
010000011001010111011000100011
101000011101101101001000111110
111101001110100101100001010111
100111001011110111011000011011
101010100111111111110000110011
110101011110111110100011101010
000011101011100001011110111110
100101101011110100010111100011
011101000101100010100010111100
001010111011001001011011100111
010111001101110111101101010110
010111001110100010111011001110
001000110101100111100000101110
010110011110100100111111111101
101011111010001000110101100111
000101100110000001111110011110
010111011001110010100110110111
000010001001110001100111000101
000111010010000010110000010111
011011010001001111110110101111
101000110101011001001010000011
111011101110001110110001010010
100110111001110000100001111000
100001001010111101010000100101
100101101001001110001110001110
010101011010100010101000100100
011000100101100010001111111000
100001001010111101010000100101
100111101011101100100101101110
011101011100111100001100111101
101001001110001110001110010101
011010111110101001110010111100
011011101011001010100011011111
101000110011011110110110110101
110110001000110111011111011111
011100111101010001011001100000
011111110101001110110110000010
000000101001010100111111111110
111110100101101011101110010111
001111000010001111000010111101
111110001000011111110111101010
111110111100101101010010101011
110111101010000110100110100001
011111010010001110001110110001
111010011111111110100110111001
110000100001111101100110000001
100111100010110101011010010011
100011100011100101010110101000
101010001001000110001001011000
100011111111011001100000011001
111000101101011110101111001011
001001011011000001010000101011
110000000011010110111110011001
000000110110101110111011011001
110111110101000010101111011111
100010001010001011111000010001
101011001100111001101011010001
011101101010100001010100001010
001011110111101110101010011111
111110001011011111101111101000
100011010101110000101101001001
110001110001110010101011010000
101101110111000111011000101001
010010001101011101110100011001
010110101111101111110111100101
011110101000010010110010001010
011011011000101001011110001110
011101101100111011001111000011
010001111111010101100101001110
110111110110111111011011011000
101001011110001110110011000000
110010101100111100001101000111
110001111101010011100100001101
000000110010101100111100001101
000111111101010011100100001101
000000110010110110101101010110
111000100100011000100101100010
001111111101111110111100101011
110101000010010110011101110010
111000101101000010111011011010
010110100110100111100010111000
010111100000111111001111001011
011001101111110001000111011011
001100010111100110010101011010
100000111111101000101111100001
000110101100110011100110101101
000101111000101111011001001001
111111111011010111110100010001
101011001111011011010000101000
101011001111110011110000110000
001011011101011101111110101110
000101001101000001110101000001
111110110101111001001111111001
110010101011100101100101101011
111011111010110110100111101001
101000010101111000011001111011
110010110010011100000111100010
001011001100000011001001001111
111111100010100111100111110110
011000000110010111101110110001
011000010101000011000000010101
110010100010011111101010101110
110010010111001010111101010111
101111101000111010100001010111
101111011101011110001001100110
000001100100001011011101111011
010101100101110011101000101110
110011111001001001001111111111
000101101010011100100001101000
000110010000101110111111110101
101100101110010110001010111111
001101110011101001000111100001
100111011001100000011001011111
011110110001011010100000111110
111011110110101101001011101101
101000100111111100001100111001
010011011011100001000100111111
100001100101110011101000101110
110001001111111111000100011010
110011110000010000110011100101
100111101100001111001110111011
000101111100101010000000101111
000011001110001011010100111001
000011010000001100101101101011
010101101100010111011001100000
011001010110011111000011001011
100111010001011101100111000101
000111010010000010110000010110
111011100011101100010100101001
000110101110111010001100101011
010111101101010110000100110101
111001010111101010000100101100
100010100110110110001010010111
100011100111011011001110110011
110000110100011111000111110101
011001010011101101111101101111
111111111110110110110001010010
111100011101100110000001100101
011001111000011010001111111010
100111001000011010000001100101
011001111000011010001111111010
100111001011011010110101011011
110111111101001010010100010010
001100010010110001000111111101
101010110000100110101111001010
111101010000100101100111101011
101101101010000110000001010111
100001100111101111001011001001
110000011110001000101100110000
001100101111000101001111001111
101100110000001100101111011101
100010110000101010000110000000
101011100101000100111111010101
011101100100101110010100100111
111111110101011110111110100011
101010000101011110111101110101
111000100110011000000110010000
101011001111100001100111011010
111100101011110101000010010110
011010001101111110001011010100
111001000011010000001100100001
011100101100110111101001100001
101010000011111110101110110010
010110111001110101110011110000
110001001111111111101101001001
110001110001110010101011010111
100010111101100101110110101111
101000100011010110011110110110
100001010110111011111110110101
101001011101101101000100111111
100001100111001010011011011100
001000100111111100001100101110
011101000101110110011100010001
101011001111000001000011001110
010110001001111111111101010111
110100101110001101110001011111
001110010101011101101011110000
000010001100000110110101000101
100110000001111110000110100110
101111001010111110100011110110
110101110110001000111011010111
100101111010111011001001011011
100111010111001011001111011110
011111001011001111011000011110
011101110110001010100111111111
110010101000000010111011011010
010110100110100111100010111000
010111101101011110011110011100
010001110101001011011010110101
011011110110010001011011001100
010111100001100101110011101000
101110110011100010100011101001
000001011000001011011100001110
11000101001


Texto descomprimido:
--------------------------------------------------
/*
 * huffman.h - Interface para o módulo de compressão de textos
 *             utilizando o algoritmo de Huffman.
 */

#include <string.h>
#include "balloc.h"
#include "imprimearvore.h"

#include "config.h"

typedef enum {false, true} Boolean;

Boolean ConstroiHuffman(char txt[],int n);
/* A partir do texto 'texto' de 'n' caracteres, constrói a árvore de
   Huffman para compressão deste texto e a guarda numa variável local
   do módulo 'huffman.c'.  Numa outra variável local guarda um vetor
   de apontadores para as folhas da árvore. Devolve 'true' se a
   construção teve sucesso; 'false' caso contrário. */

void ImprimeHuffman();
/* Imprime a árvore de Huffman num formato legível. Função auxiliar
   para os testes pelo programa principal */ 
   
void LiberaHuffman();
/* Libera a memória dinâmica ocupada pelas estruturas criadas por
   'ConstroiHuffman'. */

Boolean Comprime(char *txt, int n,
		 char *bits, int *numBits, int numBitsMax);
/* Comprime os 'n' caracteres do texto 'txt' usando as estruturas já
   construídas, e deixa o resultado como uma seqüência de pseudo-bits
   (ou bits verdadeiros) na área apontada por 'bits'. Devolve em
   'numBits' o número total de bits gerado. Em caso de sucesso devolve
   'true'; se houver mais de 'numBitsMax' bits, devolve 'false'. */

Boolean Descomprime(char *txt, int *n,
		    char *bits, int numBits, int numMaxCars);
/* Descomprime a cadeia de pseudo-bits (ou bits verdadeiros) na área
   apontada por 'bits', de comprimento 'numBits' seguindo a árvore de
   Huffman já construída.  Em caso de sucesso devolve 'true'; se
   aparecer uma codificação incompatível com a árvore, ou se houver
   mais caracteres que 'tamMaxTxt' devolve 'false'.*/

--------------------------------------------------

Textos idênticos

Texto original: 1711 bytes
Cadeia comprimida: 8081 bits (1011 bytes)
Média: 4.7 bits/caractere

A memória dinâmica foi totalmente liberada

Processamento terminado
